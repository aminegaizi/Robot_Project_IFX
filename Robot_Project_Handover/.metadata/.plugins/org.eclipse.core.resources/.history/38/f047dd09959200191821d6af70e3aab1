/*
 * GTM_ISR.c
 *
 *  Created on: 29.11.2018
 *      Author: Gaizi
 */

#include "GTM_ISR.h"

extern volatile float64 distance_obstacle;

IfxGtm_Atom_Timer timerOneMs;
IfxGtm_Atom_Timer timerPositionUpdate;
IfxGtm_Atom_Timer timerGyro;
IfxGtm_Atom_Timer timerScreen;



float current = 0;

extern float I;
extern int ModeSelector;

float energy = 0;

IFX_INTERRUPT(ISR_SensorFeedback, 0, PRIORITY_ISR_SENSOR_FEEDBACK);
IFX_INTERRUPT(ISR_ObstacleAvoidance, 0, PRIORITY_ISR_OBSTACLE_AVOIDANCE);


void ISR_SensorFeedback(void)
{
    IfxCpu_enableInterrupts();

    char ADCValue[20];
    char ENERGYValue[20];

	current = I; // A
	sprintf(ADCValue, "I = %0.2f A", current);
	GLCD_displayStringLn(LINE3, ADCValue);

	energy += 8.0*current*(0.1/3600); // W.h
	sprintf(ENERGYValue, "E = %0.4f W.h", energy);
	GLCD_displayStringLn(LINE4, ENERGYValue);

    IfxGtm_Atom_Timer_acknowledgeTimerIrq(&timerOneMs);
}

void ISR_SensorFeedBack_Config(void)
{
       /* GTM TOM configuration */
        IfxGtm_Atom_Timer_Config timerConfig;
        IfxGtm_Atom_Timer_initConfig(&timerConfig, &MODULE_GTM);
        timerConfig.base.frequency       = 13;
        timerConfig.base.isrPriority     = PRIORITY_ISR_SENSOR_FEEDBACK;
        timerConfig.base.isrProvider     = IfxSrc_Tos_cpu0;
        timerConfig.base.minResolution   = (1.0 / timerConfig.base.frequency) / 1000;
        timerConfig.base.trigger.enabled = FALSE;
        timerConfig.atom                 = IfxGtm_Atom_1;
        timerConfig.timerChannel         = IfxGtm_Atom_Ch_0;
        timerConfig.clock                = IfxGtm_Cmu_Clk_0;
        IfxGtm_Atom_Timer_init(&timerOneMs, &timerConfig);

        IfxGtm_Atom_Timer_run(&timerOneMs);
}

void ISR_ObstacleAvoidance(void)
{
    IfxCpu_enableInterrupts();
    if (distance_obstacle != 0 && distance_obstacle >= 4e3)
    {
    	Forward_1();
    }
    else if(distance_obstacle != 0 && distance_obstacle<= 4e3)
    {
    	Right();
    }
    IfxGtm_Atom_Timer_acknowledgeTimerIrq(&timerPositionUpdate);
}

void ISR_ObstacleAvoidance_Config(void)
{
       /* GTM TOM configuration */
        IfxGtm_Atom_Timer_Config timerConfig;
        IfxGtm_Atom_Timer_initConfig(&timerConfig, &MODULE_GTM);
        timerConfig.base.frequency       = 50;
        timerConfig.base.isrPriority     = PRIORITY_ISR_OBSTACLE_AVOIDANCE;
        timerConfig.base.isrProvider     = IfxSrc_Tos_cpu0;
        timerConfig.base.minResolution   = (1.0 / timerConfig.base.frequency) / 1000;
        timerConfig.base.trigger.enabled = FALSE;
        timerConfig.atom                 = IfxGtm_Atom_2;
        timerConfig.timerChannel         = IfxGtm_Atom_Ch_0;
        timerConfig.clock                = IfxGtm_Cmu_Clk_0;
        IfxGtm_Atom_Timer_init(&timerPositionUpdate, &timerConfig);

        IfxGtm_Atom_Timer_run(&timerPositionUpdate);
}

